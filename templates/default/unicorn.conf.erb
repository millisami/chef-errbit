worker_processes <%= node[:unicorn][:worker_processes] %>

user "<%= node['errbit']['user'] %>"

working_directory "<%= node['errbit']['deploy_to']%>/current"

# listen on both a Unix domain socket and a TCP port,
# use a shorter backlog for quicker failover when busy

listen "<%= node['errbit']['deploy_to']%>/shared/sockets/unicorn.sock", :backlog => <%= node[:unicorn][:backlog] %>

timeout <%= node[:unicorn][:worker_timeout] %>

pid "<%= node['errbit']['deploy_to']%>/shared/pids/unicorn.pid"

stderr_path "<%= node['errbit']['deploy_to']%>/shared/log/unicorn.stderr.log"
stdout_path "<%= node['errbit']['deploy_to']%>/shared/log/unicorn.stdout.log"

# combine REE with "preload_app true" for memory savings
# http://rubyenterpriseedition.com/faq.html#adapt_apps_for_cow
preload_app <%= node[:unicorn][:preload_app] %>
GC.copy_on_write_friendly = true if GC.respond_to?(:copy_on_write_friendly=)

# ensure Unicorn doesn't use a stale Gemfile when restarting
# more info: https://willj.net/2011/08/02/fixing-the-gemfile-not-found-bundlergemfilenotfound-error/
before_exec do |server|
  ENV['BUNDLE_GEMFILE'] = "<%= node['errbit']['deploy_to']%>/current/Gemfile"
end

before_fork do |server, worker|
  # the following is highly recomended for Rails + "preload_app true"
  # as there's no need for the master process to hold a connection
  if defined?(ActiveRecord::Base)
    ActiveRecord::Base.connection.disconnect!
  end

  # Before forking, kill the master process that belongs to the .oldbin PID.
  # This enables 0 downtime deploys.
  old_pid = "<%= node['errbit']['deploy_to']%>/shared/pids/unicorn.pid.oldbin"
  if File.exists?(old_pid) && server.pid != old_pid
    begin
      Process.kill("QUIT", File.read(old_pid).to_i)
    rescue Errno::ENOENT, Errno::ESRCH
      puts "Old master is alread dead"
    end
  end
end

after_fork do |server, worker|
  # the following is *required* for Rails + "preload_app true",
  if defined?(ActiveRecord::Base)
    ActiveRecord::Base.establish_connection
  end

  # if preload_app is true, then you may also want to check and
  # restart any other shared sockets/descriptors such as Memcached,
  # and Redis.  TokyoCabinet file handles are safe to reuse
  # between any number of forked children (assuming your kernel
  # correctly implements pread()/pwrite() system calls)

  # Unicorn master is started as root, which is fine, but let's
  # drop the workers to git:git
  #begin
  #  uid, gid = Process.euid, Process.egid
  #  user, group = "<%= node['errbit']['owner']%>", "<%= node['errbit']['group']%>"
  #  target_uid = Etc.getpwnam(user).uid
  #  target_gid = Etc.getgrnam(group).gid
  #  worker.tmp.chown(target_uid, target_gid)
  #  if uid != target_uid || gid != target_gid
  #    Process.initgroups(user, target_gid)
  #    Process::GID.change_privilege(target_gid)
  #    Process::UID.change_privilege(target_uid)
  #  end
  #rescue => e
  #  raise e
  #end
end
